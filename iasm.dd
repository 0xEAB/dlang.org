Ddoc

$(SPEC_S D x86 Inline Assembler,

	$(HTMLTAG3 a,
      href="http://digitalmars.com/gift/index.html" title="Gift Shop" target="_top",
	  $(HTMLTAG3 img, src="images/d5.gif" border=0 align=right alt="Some Assembly Required" width=284 height=186)
	)

	$(P D, being a systems programming language, provides an inline
	assembler.
	The inline assembler is standardized for D implementations across
	the same CPU family, for example, the Intel Pentium inline assembler
	for a Win32 D compiler will be syntax compatible with the inline
	assembler for Linux running on an Intel Pentium.
	)

	$(P Implementations of D on different architectures, however, are
	free to innovate upon the memory model, function call/return conventions,
	argument passing conventions, etc.
	)

	$(P This document describes the $(D x86) and $(D x86_64) implementations of
	the inline assembler. The inline assembler platform support that a compiler
	provides is indicated by the $(D D_InlineAsm_X86) and
	$(D D_InlineAsm_X86_64) version identifiers, respectively.
	)

$(GRAMMAR
$(GNAME AsmInstruction):
    $(I Identifier) $(D :) $(I AsmInstruction)
    $(D align) $(GLINK IntegerExpression)
    $(D even)
    $(D naked)
    $(D db) $(I Operands)
    $(D ds) $(I Operands)
    $(D di) $(I Operands)
    $(D dl) $(I Operands)
    $(D df) $(I Operands)
    $(D dd) $(I Operands)
    $(D de) $(I Operands)
    $(I Opcode)
    $(I Opcode Operands)

$(GNAME Operands):
    $(I Operand)
    $(I Operand) $(D ,) $(I Operands)
)

$(H2 Labels)

	$(P Assembler instructions can be labeled just like other statements.
	They can be the target of goto statements.
	For example:
	)

--------------
void *pc;
asm
{
  call L1          ;
 L1:               ;
  pop  EBX         ;
  mov  pc[EBP],EBX ; // pc now points to code at L1
}
--------------

$(H2 align $(I IntegerExpression))

$(GRAMMAR
$(GNAME IntegerExpression):
    $(GLINK2 lex, IntegerLiteral)
    $(I Identifier)
)

	$(P Causes the assembler to emit NOP instructions to align the next
	assembler instruction on an $(I IntegerExpression) boundary.
	$(I IntegerExpression) must evaluate at compile time to an integer that is
	a power of 2.
	)

	$(P Aligning the start of a loop body can sometimes have a dramatic
	effect on the execution speed.
	)

$(H2 even)

	$(P Causes the assembler to emit NOP instructions to align the next
	assembler instruction on an even boundary.
	)

$(H2 naked)

	$(P Causes the compiler to not generate the function prolog and epilog
	sequences. This means such is the responsibility of inline
	assembly programmer, and is normally used when the entire function
	is to be written in assembler.
	)

$(H2 db, ds, di, dl, df, dd, de)

	These pseudo ops are for inserting raw data directly into
	the code.
	$(D db) is for bytes,
	$(D ds) is for 16 bit words,
	$(D di) is for 32 bit words,
	$(D dl) is for 64 bit words,
	$(D df) is for 32 bit floats,
	$(D dd) is for 64 bit doubles,
	and $(D de) is for 80 bit extended reals.
	Each can have multiple operands.
	If an operand is a string literal, it is as if there were $(I length)
	operands, where $(I length) is the number of characters in the string.
	One character is used per operand.
	For example:

--------------
asm
{
  db 5,6,0x83;   // insert bytes 0x05, 0x06, and 0x83 into code
  ds 0x1234;     // insert bytes 0x34, 0x12
  di 0x1234;     // insert bytes 0x34, 0x12, 0x00, 0x00
  dl 0x1234;     // insert bytes 0x34, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  df 1.234;      // insert float 1.234
  dd 1.234;      // insert double 1.234
  de 1.234;      // insert real 1.234
  db "abc";      // insert bytes 0x61, 0x62, and 0x63
  ds "abc";      // insert bytes 0x61, 0x00, 0x62, 0x00, 0x63, 0x00
}
--------------

$(H2 Opcodes)

	A list of supported opcodes is at the end.

	$(P The following registers are supported. Register names
	are always in upper case.)

$(GRAMMAR
$(GNAME Register):
    $(D AL) $(D AH) $(D AX) $(D EAX)
    $(D BL) $(D BH) $(D BX) $(D EBX)
    $(D CL) $(D CH) $(D CX) $(D ECX)
    $(D DL) $(D DH) $(D DX) $(D EDX)
    $(D BP) $(D EBP)
    $(D SP) $(D ESP)
    $(D DI) $(D EDI)
    $(D SI) $(D ESI)
    $(D ES) $(D CS) $(D SS) $(D DS) $(D GS) $(D FS)
    $(D CR0) $(D CR2) $(D CR3) $(D CR4)
    $(D DR0) $(D DR1) $(D DR2) $(D DR3) $(D DR6) $(D DR7)
    $(D TR3) $(D TR4) $(D TR5) $(D TR6) $(D TR7)
    $(D ST)
    $(D ST(0)) $(D ST(1)) $(D ST(2)) $(D ST(3)) $(D ST(4)) $(D ST(5)) $(D ST(6)) $(D ST(7))
    $(D MM0)  $(D MM1)  $(D MM2)  $(D MM3)  $(D MM4)  $(D MM5)  $(D MM6)  $(D MM7)
    $(D XMM0) $(D XMM1) $(D XMM2) $(D XMM3) $(D XMM4) $(D XMM5) $(D XMM6) $(D XMM7)
)

    $(P $(D x86_64) adds these additional registers.)

$(GRAMMAR
$(GNAME Register64):
    $(D RAX)  $(D RBX)  $(D RCX)  $(D RDX)
    $(D BPL)  $(D RBP)
    $(D SPL)  $(D RSP)
    $(D DIL)  $(D RDI)
    $(D SIL)  $(D RSI)
    $(D R8B)  $(D R8W)  $(D R8D)  $(D R8)
    $(D R9B)  $(D R9W)  $(D R9D)  $(D R9)
    $(D R10B) $(D R10W) $(D R10D) $(D R10)
    $(D R11B) $(D R11W) $(D R11D) $(D R11)
    $(D R12B) $(D R12W) $(D R12D) $(D R12)
    $(D R13B) $(D R13W) $(D R13D) $(D R13)
    $(D R14B) $(D R14W) $(D R14D) $(D R14)
    $(D R15B) $(D R15W) $(D R15D) $(D R15)
    $(D XMM8) $(D XMM9) $(D XMM10) $(D XMM11) $(D XMM12) $(D XMM13) $(D XMM14) $(D XMM15)
    $(D YMM0) $(D YMM1) $(D YMM2)  $(D YMM3)  $(D YMM4)  $(D YMM5)  $(D YMM6)  $(D YMM7)
    $(D YMM8) $(D YMM9) $(D YMM10) $(D YMM11) $(D YMM12) $(D YMM13) $(D YMM14) $(D YMM15)
)

$(H3 Special Cases)

$(DL

	$(DT $(D lock), $(D rep), $(D repe), $(D repne),
	 $(D repnz), $(D repz))
	$(DD These prefix instructions do not appear in the same statement
	as the instructions they prefix; they appear in their own statement.
	For example:

--------------
asm {
  rep   ;
  movsb ;
}
--------------
	)

	$(DT $(D pause))
	$(DD This opcode is not supported by the assembler, instead use

--------------
asm {
  rep  ;
  nop  ;
}
--------------

	which produces the same result.
	)

	$(DT $(D floating point ops))
	$(DD Use the two operand form of the instruction format;

--------------
fdiv ST(1);	// wrong
fmul ST;        // wrong
fdiv ST,ST(1);	// right
fmul ST,ST(0);	// right
--------------
	)
)

$(H2 Operands)

$(GRAMMAR
$(GNAME Operand):
    $(I AsmExp)

$(GNAME AsmExp):
    $(I AsmLogOrExp)
    $(I AsmLogOrExp) $(D ?) $(I AsmExp) $(D :) $(I AsmExp)

$(GNAME AsmLogOrExp):
    $(I AsmLogAndExp)
    $(I AsmLogAndExp) $(D ||) $(I AsmLogAndExp)

$(GNAME AsmLogAndExp):
    $(I AsmOrExp)
    $(I AsmOrExp) $(D &&) $(I AsmOrExp)

$(GNAME AsmOrExp):
    $(I AsmXorExp)
    $(I AsmXorExp) $(D |) $(I AsmXorExp)

$(GNAME AsmXorExp):
    $(I AsmAndExp)
    $(I AsmAndExp) $(D ^) $(I AsmAndExp)

$(GNAME AsmAndExp):
    $(I AsmEqualExp)
    $(I AsmEqualExp) $(D &) $(I AsmEqualExp)

$(GNAME AsmEqualExp):
    $(I AsmRelExp)
    $(I AsmRelExp) $(D ==) $(I AsmRelExp)
    $(I AsmRelExp) $(D !=) $(I AsmRelExp)

$(GNAME AsmRelExp):
    $(I AsmShiftExp)
    $(I AsmShiftExp) $(D &lt;) $(I AsmShiftExp)
    $(I AsmShiftExp) $(D &lt;=) $(I AsmShiftExp)
    $(I AsmShiftExp) $(D &gt;) $(I AsmShiftExp)
    $(I AsmShiftExp) $(D &gt;=) $(I AsmShiftExp)

$(GNAME AsmShiftExp):
    $(I AsmAddExp)
    $(I AsmAddExp) $(D &lt;&lt;) $(I AsmAddExp)
    $(I AsmAddExp) $(D &gt;&gt;) $(I AsmAddExp)
    $(I AsmAddExp) $(D &gt;&gt;&gt;) $(I AsmAddExp)

$(GNAME AsmAddExp):
    $(I AsmMulExp)
    $(I AsmMulExp) $(D +) $(I AsmMulExp)
    $(I AsmMulExp) $(D -) $(I AsmMulExp)

$(GNAME AsmMulExp):
    $(I AsmBrExp)
    $(I AsmBrExp) $(D *) $(I AsmBrExp)
    $(I AsmBrExp) $(D /) $(I AsmBrExp)
    $(I AsmBrExp) $(D %) $(I AsmBrExp)

$(GNAME AsmBrExp):
    $(I AsmUnaExp)
    $(I AsmBrExp) $(D [) $(I AsmExp) $(D ])

$(GNAME AsmUnaExp):
    $(I AsmTypePrefix) $(I AsmExp)
    $(D offsetof) $(I AsmExp)
    $(D seg) $(I AsmExp)
    $(D +) $(I AsmUnaExp)
    $(D -) $(I AsmUnaExp)
    $(D !) $(I AsmUnaExp)
    $(D ~) $(I AsmUnaExp)
    $(I AsmPrimaryExp)

$(GNAME AsmPrimaryExp):
    $(GLINK2 lex, IntegerLiteral)
    $(GLINK2 lex, FloatLiteral)
    $(D __LOCAL_SIZE)
    $(D $)
    $(GLINK Register)
    $(GLINK Register64)
    $(I DotIdentifier)

$(GNAME DotIdentifier):
    $(I Identifier)
    $(I Identifier) $(D .) $(I DotIdentifier)
)

	$(P The operand syntax more or less follows the Intel CPU documentation
	conventions.
	In particular, the convention is that for two operand instructions
	the source is the right operand and the destination is the left
	operand.
	The syntax differs from that of Intel's in order to be compatible
	with the D language tokenizer and to simplify parsing.
	)

	$(P The $(D seg) means load the segment number that the symbol is
	in. This is not relevant for flat model code.
	Instead, do a move from the relevant segment register.
	)

$(H3 Operand Types)

$(GRAMMAR
$(GNAME AsmTypePrefix):
    $(D near ptr)
    $(D far ptr)
    $(D byte ptr)
    $(D short ptr)
    $(D int ptr)
    $(D word ptr)
    $(D dword ptr)
    $(D qword ptr)
    $(D float ptr)
    $(D double ptr)
    $(D real ptr)
)

	$(P In cases where the operand size is ambiguous, as in:)

--------------
add	[EAX],3		;
--------------

	$(P it can be disambiguated by using an $(I AsmTypePrefix):)

--------------
add  byte ptr [EAX],3 ;
add  int ptr [EAX],7  ;
--------------

	$(P $(D far ptr) is not relevant for flat model code.
	)

$(H3 Struct/Union/Class Member Offsets)

    $(P To access members of an aggregate, given a pointer to the aggregate
    is in a register, use the $(D .offsetof) property of the qualified name
    of the member:
	)

--------------
struct Foo { int a,b,c; }
int bar(Foo *f) {
  asm {
    mov EBX,f                   ;
    mov EAX,Foo.b.offsetof[EBX] ;
  }
}
void main() {
    Foo f = Foo(0, 2, 0);
    assert(bar(&f) == 2);
}
--------------

    $(P Alternatively, inside the scope of an aggregate, only the member name is needed:)

--------------
struct Foo { // or class
  int a,b,c;
  int bar() {
    asm {
      mov EBX, this   ;
      mov EAX, b[EBX] ;
    }
  }
}
void main() {
    Foo f = Foo(0, 2, 0);
    assert(f.bar() == 2);
}
--------------

$(H3 Stack Variables)

	$(P Stack variables (variables local to a function and allocated
	on the stack) are accessed via the name of the variable indexed
	by EBP:
	)

---
int foo(int x) {
  asm {
    mov EAX,x[EBP] ; // loads value of parameter x into EAX
    mov EAX,x      ; // does the same thing
  }
}
---

	$(P If the [EBP] is omitted, it is assumed for local variables.
	If $(D naked) is used, this no longer holds.
	)

$(H3 Special Symbols)

	$(DL

	$(DT $(DOLLAR))
	$(DD Represents the program counter of the start of the next
	instruction. So,

--------------
jmp  $  ;
--------------

	branches to the instruction following the jmp instruction.
	The $(DOLLAR) can only appear as the target of a jmp or call
	instruction.
	)

	$(DT $(D __LOCAL_SIZE))
	$(DD This gets replaced by the number of local bytes in the local
	stack frame. It is most handy when the $(D naked) is invoked
	and a custom stack frame is programmed.
	)

	)

$(H2 Opcodes Supported)

	$(TABLE1
	$(TROW aaa, aad, aam, aas, adc)
	$(TR
  	$(TD add)
  	$(TD addpd)
  	$(TD addps)
  	$(TD addsd)
  	$(TD addss)
	)$(TR
  	$(TD and)
  	$(TD andnpd)
  	$(TD andnps)
  	$(TD andpd)
  	$(TD andps)
	)$(TR
  	$(TD arpl)
  	$(TD bound)
  	$(TD bsf)
  	$(TD bsr)
  	$(TD bswap)
	)$(TR
  	$(TD bt)
  	$(TD btc)
  	$(TD btr)
  	$(TD bts)
  	$(TD call)
	)$(TR
  	$(TD cbw)
  	$(TD cdq)
  	$(TD clc)
  	$(TD cld)
	$(TD clflush)
	)$(TR
  	$(TD cli)
  	$(TD clts)
  	$(TD cmc)
  	$(TD cmova)
  	$(TD cmovae)
	)$(TR
  	$(TD cmovb)
  	$(TD cmovbe)
  	$(TD cmovc)
  	$(TD cmove)
  	$(TD cmovg)
	)$(TR
  	$(TD cmovge)
  	$(TD cmovl)
  	$(TD cmovle)
  	$(TD cmovna)
  	$(TD cmovnae)
	)$(TR
  	$(TD cmovnb)
  	$(TD cmovnbe)
  	$(TD cmovnc)
  	$(TD cmovne)
  	$(TD cmovng)
	)$(TR
  	$(TD cmovnge)
  	$(TD cmovnl)
  	$(TD cmovnle)
  	$(TD cmovno)
  	$(TD cmovnp)
	)$(TR
  	$(TD cmovns)
  	$(TD cmovnz)
  	$(TD cmovo)
  	$(TD cmovp)
  	$(TD cmovpe)
	)$(TR
  	$(TD cmovpo)
  	$(TD cmovs)
  	$(TD cmovz)
  	$(TD cmp)
  	$(TD cmppd)
	)$(TR
  	$(TD cmpps)
  	$(TD cmps)
  	$(TD cmpsb)
  	$(TD cmpsd)
  	$(TD cmpss)
	)$(TR
  	$(TD cmpsw)
  	$(TD cmpxch8b)
  	$(TD cmpxchg)
  	$(TD comisd)
  	$(TD comiss)
	)$(TR
  	$(TD cpuid)
	$(TD cvtdq2pd)
	$(TD cvtdq2ps)
	$(TD cvtpd2dq)
	$(TD cvtpd2pi)
	)$(TR
	$(TD cvtpd2ps)
	$(TD cvtpi2pd)
	$(TD cvtpi2ps)
	$(TD cvtps2dq)
	$(TD cvtps2pd)
	)$(TR
	$(TD cvtps2pi)
	$(TD cvtsd2si)
	$(TD cvtsd2ss)
	$(TD cvtsi2sd)
	$(TD cvtsi2ss)
	)$(TR
	$(TD cvtss2sd)
	$(TD cvtss2si)
	$(TD cvttpd2dq)
	$(TD cvttpd2pi)
	$(TD cvttps2dq)
	)$(TR
	$(TD cvttps2pi)
	$(TD cvttsd2si)
	$(TD cvttss2si)
  	$(TD cwd)
  	$(TD cwde)
	)$(TR
  	$(TD da)
  	$(TD daa)
  	$(TD das)
  	$(TD db)
  	$(TD dd)
	)$(TR
  	$(TD de)
  	$(TD dec)
  	$(TD df)
  	$(TD di)
  	$(TD div)
	)$(TR
	$(TD divpd)
	$(TD divps)
	$(TD divsd)
	$(TD divss)
  	$(TD dl)
	)$(TR
  	$(TD dq)
  	$(TD ds)
  	$(TD dt)
  	$(TD dw)
	$(TD emms)
	)$(TR
  	$(TD enter)
  	$(TD f2xm1)
  	$(TD fabs)
  	$(TD fadd)
  	$(TD faddp)
	)$(TR
  	$(TD fbld)
  	$(TD fbstp)
  	$(TD fchs)
  	$(TD fclex)
  	$(TD fcmovb)
	)$(TR
  	$(TD fcmovbe)
  	$(TD fcmove)
  	$(TD fcmovnb)
  	$(TD fcmovnbe)
  	$(TD fcmovne)
	)$(TR
  	$(TD fcmovnu)
  	$(TD fcmovu)
  	$(TD fcom)
  	$(TD fcomi)
  	$(TD fcomip)
	)$(TR
  	$(TD fcomp)
  	$(TD fcompp)
  	$(TD fcos)
  	$(TD fdecstp)
  	$(TD fdisi)
	)$(TR
  	$(TD fdiv)
  	$(TD fdivp)
  	$(TD fdivr)
  	$(TD fdivrp)
  	$(TD feni)
	)$(TR
  	$(TD ffree)
  	$(TD fiadd)
  	$(TD ficom)
  	$(TD ficomp)
  	$(TD fidiv)
	)$(TR
  	$(TD fidivr)
  	$(TD fild)
  	$(TD fimul)
  	$(TD fincstp)
  	$(TD finit)
	)$(TR
  	$(TD fist)
  	$(TD fistp)
  	$(TD fisub)
  	$(TD fisubr)
  	$(TD fld)
	)$(TR
  	$(TD fld1)
  	$(TD fldcw)
  	$(TD fldenv)
  	$(TD fldl2e)
  	$(TD fldl2t)
	)$(TR
  	$(TD fldlg2)
  	$(TD fldln2)
  	$(TD fldpi)
  	$(TD fldz)
  	$(TD fmul)
	)$(TR
  	$(TD fmulp)
  	$(TD fnclex)
  	$(TD fndisi)
  	$(TD fneni)
  	$(TD fninit)
	)$(TR
  	$(TD fnop)
  	$(TD fnsave)
  	$(TD fnstcw)
  	$(TD fnstenv)
  	$(TD fnstsw)
	)$(TR
  	$(TD fpatan)
  	$(TD fprem)
  	$(TD fprem1)
  	$(TD fptan)
  	$(TD frndint)
	)$(TR
  	$(TD frstor)
  	$(TD fsave)
  	$(TD fscale)
  	$(TD fsetpm)
  	$(TD fsin)
	)$(TR
  	$(TD fsincos)
  	$(TD fsqrt)
  	$(TD fst)
  	$(TD fstcw)
  	$(TD fstenv)
	)$(TR
  	$(TD fstp)
  	$(TD fstsw)
  	$(TD fsub)
  	$(TD fsubp)
  	$(TD fsubr)
	)$(TR
  	$(TD fsubrp)
  	$(TD ftst)
  	$(TD fucom)
  	$(TD fucomi)
  	$(TD fucomip)
	)$(TR
  	$(TD fucomp)
  	$(TD fucompp)
  	$(TD fwait)
  	$(TD fxam)
  	$(TD fxch)
	)$(TR
	$(TD fxrstor)
	$(TD fxsave)
  	$(TD fxtract)
  	$(TD fyl2x)
  	$(TD fyl2xp1)
	)$(TR
  	$(TD hlt)
  	$(TD idiv)
  	$(TD imul)
  	$(TD in)
  	$(TD inc)
	)$(TR
  	$(TD ins)
  	$(TD insb)
  	$(TD insd)
  	$(TD insw)
  	$(TD int)
	)$(TR
  	$(TD into)
  	$(TD invd)
  	$(TD invlpg)
  	$(TD iret)
  	$(TD iretd)
	)$(TR
  	$(TD ja)
  	$(TD jae)
  	$(TD jb)
  	$(TD jbe)
  	$(TD jc)
	)$(TR
  	$(TD jcxz)
  	$(TD je)
  	$(TD jecxz)
  	$(TD jg)
  	$(TD jge)
	)$(TR
  	$(TD jl)
  	$(TD jle)
  	$(TD jmp)
  	$(TD jna)
  	$(TD jnae)
	)$(TR
  	$(TD jnb)
  	$(TD jnbe)
  	$(TD jnc)
  	$(TD jne)
  	$(TD jng)
	)$(TR
  	$(TD jnge)
  	$(TD jnl)
  	$(TD jnle)
  	$(TD jno)
  	$(TD jnp)
	)$(TR
  	$(TD jns)
  	$(TD jnz)
  	$(TD jo)
  	$(TD jp)
  	$(TD jpe)
	)$(TR
  	$(TD jpo)
  	$(TD js)
  	$(TD jz)
  	$(TD lahf)
  	$(TD lar)
	)$(TR
	$(TD ldmxcsr)
  	$(TD lds)
  	$(TD lea)
  	$(TD leave)
  	$(TD les)
	)$(TR
	$(TD lfence)
  	$(TD lfs)
  	$(TD lgdt)
  	$(TD lgs)
  	$(TD lidt)
	)$(TR
  	$(TD lldt)
  	$(TD lmsw)
	$(TD lock)
  	$(TD lods)
  	$(TD lodsb)
	)$(TR
  	$(TD lodsd)
  	$(TD lodsw)
  	$(TD loop)
  	$(TD loope)
  	$(TD loopne)
	)$(TR
  	$(TD loopnz)
  	$(TD loopz)
  	$(TD lsl)
  	$(TD lss)
  	$(TD ltr)
	)$(TR
	$(TD maskmovdqu)
	$(TD maskmovq)
	$(TD maxpd)
	$(TD maxps)
	$(TD maxsd)
	)$(TR
	$(TD maxss)
	$(TD mfence)
	$(TD minpd)
	$(TD minps)
	$(TD minsd)
	)$(TR
	$(TD minss)
  	$(TD mov)
	$(TD movapd)
	$(TD movaps)
  	$(TD movd)
	)$(TR
	$(TD movdq2q)
	$(TD movdqa)
	$(TD movdqu)
	$(TD movhlps)
	$(TD movhpd)
	)$(TR
	$(TD movhps)
	$(TD movlhps)
	$(TD movlpd)
	$(TD movlps)
	$(TD movmskpd)
	)$(TR
	$(TD movmskps)
	$(TD movntdq)
	$(TD movnti)
	$(TD movntpd)
	$(TD movntps)
	)$(TR
	$(TD movntq)
  	$(TD movq)
	$(TD movq2dq)
  	$(TD movs)
  	$(TD movsb)
	)$(TR
  	$(TD movsd)
	$(TD movss)
  	$(TD movsw)
  	$(TD movsx)
	$(TD movupd)
	)$(TR
	$(TD movups)
  	$(TD movzx)
  	$(TD mul)
	$(TD mulpd)
	$(TD mulps)
	)$(TR
	$(TD mulsd)
	$(TD mulss)
  	$(TD neg)
  	$(TD nop)
  	$(TD not)
	)$(TR
  	$(TD or)
	$(TD orpd)
	$(TD orps)
  	$(TD out)
  	$(TD outs)
	)$(TR
  	$(TD outsb)
  	$(TD outsd)
  	$(TD outsw)
	$(TD packssdw)
	$(TD packsswb)
	)$(TR
	$(TD packuswb)
	$(TD paddb)
	$(TD paddd)
	$(TD paddq)
	$(TD paddsb)
	)$(TR
	$(TD paddsw)
	$(TD paddusb)
	$(TD paddusw)
	$(TD paddw)
	$(TD pand)
	)$(TR
	$(TD pandn)
	$(TD pavgb)
	$(TD pavgw)
	$(TD pcmpeqb)
	$(TD pcmpeqd)
	)$(TR
	$(TD pcmpeqw)
	$(TD pcmpgtb)
	$(TD pcmpgtd)
	$(TD pcmpgtw)
	$(TD pextrw)
	)$(TR
	$(TD pinsrw)
	$(TD pmaddwd)
	$(TD pmaxsw)
	$(TD pmaxub)
	$(TD pminsw)
	)$(TR
	$(TD pminub)
	$(TD pmovmskb)
	$(TD pmulhuw)
	$(TD pmulhw)
	$(TD pmullw)
	)$(TR
	$(TD pmuludq)
  	$(TD pop)
  	$(TD popa)
  	$(TD popad)
  	$(TD popf)
	)$(TR
  	$(TD popfd)
	$(TD por)
	$(TD prefetchnta)
	$(TD prefetcht0)
	$(TD prefetcht1)
	)$(TR
	$(TD prefetcht2)
	$(TD psadbw)
	$(TD pshufd)
	$(TD pshufhw)
	$(TD pshuflw)
	)$(TR
	$(TD pshufw)
	$(TD pslld)
	$(TD pslldq)
	$(TD psllq)
	$(TD psllw)
	)$(TR
	$(TD psrad)
	$(TD psraw)
	$(TD psrld)
	$(TD psrldq)
	$(TD psrlq)
	)$(TR
	$(TD psrlw)
	$(TD psubb)
	$(TD psubd)
	$(TD psubq)
	$(TD psubsb)
	)$(TR
	$(TD psubsw)
	$(TD psubusb)
	$(TD psubusw)
	$(TD psubw)
	$(TD punpckhbw)
	)$(TR
	$(TD punpckhdq)
	$(TD punpckhqdq)
	$(TD punpckhwd)
	$(TD punpcklbw)
	$(TD punpckldq)
	)$(TR
	$(TD punpcklqdq)
	$(TD punpcklwd)
  	$(TD push)
  	$(TD pusha)
  	$(TD pushad)
	)$(TR
  	$(TD pushf)
  	$(TD pushfd)
	$(TD pxor)
  	$(TD rcl)
	$(TD rcpps)
	)$(TR
	$(TD rcpss)
  	$(TD rcr)
  	$(TD rdmsr)
	$(TD rdpmc)
  	$(TD rdtsc)
	)$(TR
  	$(TD rep)
  	$(TD repe)
  	$(TD repne)
  	$(TD repnz)
  	$(TD repz)
	)$(TR
  	$(TD ret)
  	$(TD retf)
  	$(TD rol)
  	$(TD ror)
  	$(TD rsm)
	)$(TR
	$(TD rsqrtps)
	$(TD rsqrtss)
  	$(TD sahf)
  	$(TD sal)
  	$(TD sar)
	)$(TR
  	$(TD sbb)
  	$(TD scas)
  	$(TD scasb)
  	$(TD scasd)
  	$(TD scasw)
	)$(TR
  	$(TD seta)
  	$(TD setae)
  	$(TD setb)
  	$(TD setbe)
  	$(TD setc)
	)$(TR
  	$(TD sete)
  	$(TD setg)
  	$(TD setge)
  	$(TD setl)
  	$(TD setle)
	)$(TR
  	$(TD setna)
  	$(TD setnae)
  	$(TD setnb)
  	$(TD setnbe)
  	$(TD setnc)
	)$(TR
  	$(TD setne)
  	$(TD setng)
  	$(TD setnge)
  	$(TD setnl)
  	$(TD setnle)
	)$(TR
  	$(TD setno)
  	$(TD setnp)
  	$(TD setns)
  	$(TD setnz)
  	$(TD seto)
	)$(TR
  	$(TD setp)
  	$(TD setpe)
  	$(TD setpo)
  	$(TD sets)
  	$(TD setz)
	)$(TR
	$(TD sfence)
  	$(TD sgdt)
  	$(TD shl)
  	$(TD shld)
  	$(TD shr)
	)$(TR
  	$(TD shrd)
	$(TD shufpd)
	$(TD shufps)
  	$(TD sidt)
  	$(TD sldt)
	)$(TR
  	$(TD smsw)
	$(TD sqrtpd)
	$(TD sqrtps)
	$(TD sqrtsd)
	$(TD sqrtss)
	)$(TR
  	$(TD stc)
  	$(TD std)
  	$(TD sti)
	$(TD stmxcsr)
  	$(TD stos)
	)$(TR
  	$(TD stosb)
  	$(TD stosd)
  	$(TD stosw)
  	$(TD str)
  	$(TD sub)
	)$(TR
	$(TD subpd)
	$(TD subps)
	$(TD subsd)
	$(TD subss)
	$(TD sysenter)
	)$(TR
	$(TD sysexit)
  	$(TD test)
	$(TD ucomisd)
	$(TD ucomiss)
	$(TD ud2)
	)$(TR
	$(TD unpckhpd)
	$(TD unpckhps)
	$(TD unpcklpd)
	$(TD unpcklps)
  	$(TD verr)
	)$(TR
  	$(TD verw)
  	$(TD wait)
  	$(TD wbinvd)
  	$(TD wrmsr)
  	$(TD xadd)
	)$(TR
  	$(TD xchg)
  	$(TD xlat)
  	$(TD xlatb)
  	$(TD xor)
	$(TD xorpd)
	)$(TR
	$(TD xorps)
	$(TD  )
	$(TD  )
	$(TD  )
	$(TD  )
	)
	)

$(H3 Pentium 4 (Prescott) Opcodes Supported)

	$(TABLE1
	$(TR
	$(TD addsubpd)
	$(TD addsubps)
  	$(TD fisttp)
	$(TD haddpd)
	$(TD haddps)
	)$(TR
	$(TD hsubpd)
	$(TD hsubps)
	$(TD lddqu)
	$(TD monitor)
	$(TD movddup)
	)$(TR
	$(TD movshdup)
	$(TD movsldup)
	$(TD mwait)
	$(TD  )
	$(TD  )

	)
	)

$(H3 AMD Opcodes Supported)

	$(TABLE1
	$(TR
	$(TD pavgusb)
	$(TD pf2id)
	$(TD pfacc)
	$(TD pfadd)
	$(TD pfcmpeq)
	)$(TR
	$(TD pfcmpge)
	$(TD pfcmpgt)
	$(TD pfmax)
	$(TD pfmin)
	$(TD pfmul)
	)$(TR
	$(TD pfnacc)
	$(TD pfpnacc)
	$(TD pfrcp)
	$(TD pfrcpit1)
	$(TD pfrcpit2)
	)$(TR
	$(TD pfrsqit1)
	$(TD pfrsqrt)
	$(TD pfsub)
	$(TD pfsubr)
	$(TD pi2fd)
	)$(TR
	$(TD pmulhrw)
	$(TD pswapd)
	)
	)

$(H3 SIMD)

    $(P SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX are supported.)

$(COMMENT
$(H3 Other)
    $(P AES, CMUL, FSGSBASE, RDRAND, FP16C and FMA are supported.)
)

$(COMMENT
SSE4.1

blendpd
blendps
blendvpd
blendvps
dppd
dpps
extractps
insertps
movntdqa
mpsadbw
packusdw
pblendub
pblendw
pcmpeqq
pextrb
pextrd
pextrq
pextrw
phminposuw
pinsrb
pinsrd
pinsrq
pmaxsb
pmaxsd
pmaxud
pmaxuw
pminsb
pminsd
pminud
pminuw
pmovsxbd
pmovsxbq
pmovsxbw
pmovsxwd
pmovsxwq
pmovsxdq
pmovzxbd
pmovzxbq
pmovzxbw
pmovzxwd
pmovzxwq
pmovzxdq
pmuldq
pmulld
ptest
roundpd
roundps
roundsd
roundss

SSE4.2

crc32
pcmpestri
pcmpestrm
pcmpistri
pcmpistrm
pcmpgtq
popcnt

VMS

invept
invvpid
vmcall
vmclear
vmlaunch
vmresume
vmptrld
vmptrst
vmread
vmwrite
vmxoff
vmxon

SMX

getsec
)

)

Macros:
	TITLE=Inline Assembler
	WIKI=IAsm
	CATEGORY_SPEC=$0

