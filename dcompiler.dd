Ddoc

$(D_S dmd - $(WINDOWS Windows)$(LINUX Linux) D Compiler,

	$(UL 
	$(WINDOWS $(LI dmd for $(LINK2 dmd-linux.html, x86 Linux)))
	$(LINUX   $(LI dmd for $(LINK2 dmd-windows.html, Windows)))
	$(LI $(LINK2 #requirements, Requirements and Downloads))
	$(LI $(LINK2 #files, Files))
	$(LI $(LINK2 #installation, Installation))
	$(WINDOWS $(LI $(LINK2 #example, Example)))
	$(LI $(LINK2 #switches, Compiler Arguments and Switches))
	$(LI $(LINK2 #linking, Linking))
	$(LI $(LINK2 #environment, Environment Variables))
	$(WINDOWS $(LI $(LINK2 #sc_ini, sc.ini Initialization File)))
	$(LINUX $(LI $(LINK2 #dmd_conf, dmd.conf Initialization File)))
	$(WINDOWS $(LI $(LINK2 #problems, Common Installation Problems)))
	$(LI $(LINK2 #differences, Differences between Windows and Linux versions))
	$(LI $(LINK2 #interface_files, D Interface Files))
	$(LI $(LINK2 #library, Building Libraries))
	)

<h2>$(LNAME2 requirements, Requirements and Downloads)</h2>

	$(OL
	$(LI $(LINK2 http://www.digitalmars.com/d/download.html, Download D Compiler))

    $(WINDOWS
	$(LI 32 bit Windows (Win32) operating system, such as Windows XP)

	$(LI Download
	 <a href="http://ftp.digitalmars.com/dmc.zip" title="download dmc.zip">
	 dmc.zip (linker and utilities)</a> for Win32
	)
    )
    $(LINUX
	$(LI 32 bit x86 Linux operating system)

	$(LI Gnu C compiler (gcc))
    )
	)

<h2>$(LNAME2 files, Files)</h2>

	$(DL

	$(DT $(TT $(SEP)dmd$(SEP)src$(SEP)phobos$(SEP))
	$(DD D runtime library source)
	)

	$(DT $(TT $(SEP)dmd$(SEP)src$(SEP)dmd$(SEP))
	$(DD D compiler front end source under dual (GPL and Artistic) license)
	)

	$(DT $(TT $(SEP)dmd$(SEP)html$(SEP)d$(SEP))
	$(DD Documentation)
	)

	$(DT $(TT $(SEP)dmd$(SEP)samples$(SEP)d$(SEP))
	$(DD Sample D programs)
	)
    $(WINDOWS
	$(DT $(TT \dmd\bin\dmd.exe)
	$(DD D compiler executable)
	)

	$(DT $(TT \dmd\bin\$(LINK2 http://www.digitalmars.com/ctg/shell.html, shell.exe))
	$(DD Simple command line shell)
	)

	$(DT $(TT \dmd\bin\sc.ini)
	$(DD Global compiler settings)
	)

	$(DT $(TT \dmd\lib\$(LIB))
	$(DD D runtime library)
	)
    )
    $(LINUX
	<dt>$(TT /dmd/bin/dmd)
	<dd>D compiler executable

	<dt>$(TT /dmd/bin/$(LINK2 http://www.digitalmars.com/ctg/dumpobj.html, dumpobj))
	<dd>Elf file dumper

	<dt>$(TT /dmd/bin/$(LINK2 http://www.digitalmars.com/ctg/obj2asm.html, obj2asm))
	<dd>Elf file disassembler

	<dt>$(TT /dmd/bin/dmd.conf)
	<dd>Global compiler settings (copy to $(TT /etc/dmd.conf))

	<dt>$(TT /dmd/lib/$(LIB))
	<dd>D runtime library (copy to $(TT /usr/lib/$(LIB)))
    )

	)

<h2>$(LNAME2 installation, Installation)</h2>

    $(WINDOWS
	$(P Open a console window (for Windows XP this is done by
	clicking on [Start][Command Prompt]).
	All the tools are command line tools, which means
	they are run from a console window.
	Switch to the root directory.
	Unzip the files in the root directory.
	$(TT dmd.zip) will create
	a $(TT \dmd) directory with all the files in it.
	$(TT dmc.zip) will create
	a $(TT \dm) directory with all the files in it.
	)

	$(P A typical session might look like:)

$(CONSOLE
C:\Documents and Settings\Your Name&gt;cd \ 
C:\&gt;unzip dmd.zip
C:\&gt;unzip dmc.zip
)
    )
    $(LINUX
	$(LI Unzip the archive into your home directory.
	It will create
	a $(TT ~/dmd) directory with all the files in it.
	All the tools are command line tools, which means
	they are run from a console window.)

	$(LI Copy $(TT dmd.conf) to $(TT /etc):

$(CONSOLE
cp dmd/bin/dmd.conf /etc
)
	)

	$(LI Give execute permission to the following files:

$(CONSOLE
chmod u+x dmd/bin/{dmd,dumpobj,obj2asm,rdmd}
)
	)

	$(LI Put $(TT dmd/bin) on your $(B PATH),
	or copy the linux executables
	to $(TT /usr/local/bin))

	$(LI Copy the library to $(TT /usr/lib):

$(CONSOLE
cp dmd/lib/$(LIB) /usr/lib
)
	)
    )

<h2>Example</h2>

	$(P Run:)

$(CONSOLE
$(SEP)dmd$(SEP)bin$(SEP)shell all.sh
)

	$(P in the $(TT $(SEP)dmd$(SEP)samples$(SEP)d) directory for several small examples.)


<h2>$(LNAME2 switches, Compiler Arguments and Switches)</h2>

	$(DL
	  $(DT $(B dmd) $(I files)... -$(I switches)...
		$(DD )
	  )

	  $(DT $(I files)...
		$(DD
		$(TABLE2 File Extensions,
		$(TR
		$(TH Extension)
		$(TH File Type)
		)
		$(TR
		$(TD $(I none))
		$(TD D source files)
		)
		$(TR
		$(TD $(B .d))
		$(TD D source files)
		)
		$(TR
		$(TD $(B .dd))
		$(TD Ddoc source files)
		)
		$(TR
		$(TD $(B .di))
		$(TD $(LINK2 #interface_files, D interface files))
		)
		$(TR
		$(TD $(B .$(OBJEXT)))
		$(TD Object files to link in)
		)
		$(TR
		$(TD $(B .$(LIBEXT)))
		$(TD Object code libraries to search)
		)
$(WINDOWS
		$(TR
		$(TD $(B .exe))
		$(TD Output executable file)
		)
		$(TR
		$(TD $(B .def))
		$(TD module definition file)
		)
		$(TR
		$(TD $(B .res))
		$(TD resource file)
		)
)
		)
		)
	  )

    $(WINDOWS
	  $(SWITCH $(B @)$(I cmdfile),
		reads compiler arguments and switches from
		text file $(I cmdfile)
	  )
    )

	  $(SWITCH $(B -c),
		compile only, do not link
	  )

	  $(SWITCH $(B -cov),
		instrument for $(LINK2 code_coverage.html, code coverage analysis)
	  )

	  $(SWITCH $(B -D),
		generate $(LINK2 ddoc.html, documentation) from source
	  )

	  $(SWITCH $(B -Dd)$(I docdir),
		write documentation file to $(I docdir) directory
	  )

	  $(SWITCH $(B -Df)$(I filename),
		write documentation file to $(I filename)
	  )

	  $(SWITCH $(B -d),
		allow deprecated features
	  )
	  $(SWITCH $(B -debug),
		compile in $(LINK2 version.html#debug, debug) code
	  )
	  $(SWITCH $(B -debug=)$(I level),
		compile in $(LINK2 version.html#debug, debug level) &lt;= $(I level)
	  )
	  $(SWITCH $(B -debug=)$(I ident),
		compile in $(LINK2 version.html#debug, debug identifier) $(I ident)
	  )

	  $(SWITCH $(B -debuglib=)$(I libname),
		link in $(I libname) as the default library when
		compiling for symbolic debugging instead of $(B $(LIB))
	  )
	  $(SWITCH $(B -defaultlib=)$(I libname),
		link in $(I libname) as the default library when
		not compiling for symbolic debugging instead of $(B $(LIB))
	  )

    $(LINUX
	  $(SWITCH $(B -fPIC),
		generate Position Independent Code (which is used
		for building shared libraries)
	  )
    )

	  $(SWITCH $(B -g),
    $(WINDOWS
		add CodeView 4 symbolic debug info with
		$(LINK2 abi.html#codeview, D extensions)
		for debuggers such as
		$(LINK2 http://ddbg.mainia.de/releases.html, Ddbg)
    )
    $(LINUX
		add Dwarf symbolic debug info with
		$(LINK2 abi.html#dwarf, D extensions)
		for debuggers such as
		$(LINK2 http://www.zerobugs.org/, ZeroBUGS)
    )
	  )

	  $(SWITCH $(B -gc),
    $(WINDOWS
		add CodeView 4 symbolic debug info in C format
		for debuggers such as
		$(TT \dmd\bin\windbg)
    )
    $(LINUX
		add Dwarf symbolic debug info in C format
		for debuggers such as
		$(TT gdb)
    )
	  )

	  $(SWITCH $(B -H),
		generate $(LINK2 #interface_files, D interface file)
	  )

	  $(SWITCH $(B -Hd)$(I dir),
		write D interface file to $(I dir) directory
	  )

	  $(SWITCH $(B -Hf)$(I filename),
		write D interface file to $(I filename)
	  )

	  $(SWITCH $(B --help),
		print brief help to console
	  )

	  $(SWITCH $(B -inline),
		inline expand functions at the discretion of the compiler.
		This can improve performance, at the expense of making
		it more difficult to use a debugger on it.
	  )

	  $(SWITCH $(B -I)$(I path),
		where to look for
		$(LINK2 module.html#ImportDeclaration, imports).
		$(I path) is a ; separated
		list of paths. Multiple $(B -I)'s can be used, and the paths
		are searched in the same order.
	  )

	  $(SWITCH $(B -ignore),
		ignore unsupported pragmas
	  )

	  $(SWITCH $(B -J)$(I path),
		where to look for files for
		$(LINK2 expression.html#ImportExpression, $(I ImportExpression))s.
		This switch is required in order to use $(I ImportExpression)s.
		$(I path) is a ; separated
		list of paths. Multiple $(B -J)'s can be used, and the paths
		are searched in the same order.
	  )

	  $(SWITCH $(B -L)$(I linkerflag),
		pass $(I linkerflag) to the
		$(WINDOWS $(LINK2 http://www.digitalmars.com/ctg/optlink.html, linker))
		$(LINUX linker), for example,
		$(WINDOWS $(TT -L/ma/li))$(LINUX $(TT -L-M))
	  )

	  $(SWITCH $(B -lib),
		generate library file as output instead of object file(s).
		All compiled source files, as well as object files and library
		files specified on the command line, are inserted into
		the output library.
		Compiled source modules may be partitioned into several object
		modules to improve granularity.
		The name of the library is taken from the name of the first
		source module to be compiled. This can be overridden with
		the $(B -of) switch.
	  )

	  $(SWITCH $(B -man),
    $(WINDOWS
		open default browser on this page
    )
    $(LINUX
		open browser specified by the $(B BROWSER)
		environment variable on this page. If $(B BROWSER) is
		undefined, $(B firefox) is assumed.
    )
	  )

    $(WINDOWS
	  $(SWITCH $(B -nofloat),
		Prevents emission of $(B __fltused) reference in
		object files, even if floating point code is present.
		Useful for library code.
	  )
    )

	  $(SWITCH $(B -O),
		Optimize generated code. For fastest executables, compile
		with the $(B -O -release -inline) switches together.
	  )

	  $(SWITCH $(B -o-),
		Suppress generation of object file. Useful in
		conjuction with $(B -D) or $(B -H) flags.
	  )

	  $(SWITCH $(B -od)$(I objdir),
		$(DD write object files relative to directory $(I objdir)
		instead of to the current directory)
	  )
	  $(SWITCH $(B -of)$(I filename),
		Set output file name to $(I filename) in the output
		directory. The output file can be an object file,
		executable file, or library file depending on the other
		switches.
	  )
	  $(SWITCH $(B -op),
		normally the path for $(B .d) source files is stripped
		off when generating an object file name. $(B -op) will leave
		it on.
	  )
	  $(SWITCH $(B -profile),
		$(LINK2 http://www.digitalmars.com/ctg/trace.html, profile)
		the runtime performance
		of the generated code
	  )
	  $(SWITCH $(B -quiet),
		suppress non-essential compiler messages
	  )
	  $(SWITCH $(B -release),
		compile release version, which means not generating
		code for contracts and asserts
	  )
	  $(SWITCH $(B -run) $(I srcfile args...)
		compile, link, and run the program $(I srcfile) with the
		rest of the
		command line, $(I args...), as the arguments to the program.
		No .$(OBJEXT) or executable file is left behind.
	  )
$(V2
	  $(SWITCH $(B -safe),
		Statically checks the modules being compiled to ensure they
		conform to the safe memory model.
	  )
)
	  $(SWITCH $(B -unittest),
		compile in unittest code, turns on asserts, and sets the
		$(TT unittest) $(LINK2 version.html#PredefinedVersions, version identifier)
	  )
	  $(SWITCH $(B -v),
		verbose
	  )
	  $(SWITCH $(B -version=)$(I level),
		compile in $(LINK2 version.html#version, version level) >= $(I level)
	  )
	  $(SWITCH $(B -version=)$(I ident),
		compile in $(LINK2 version.html#version, version identifier) $(I ident)
	  )
	  $(SWITCH $(B -w),
		enable $(LINK2 warnings.html, warnings)
	  )
	)

    $(WINDOWS
	$(P Empty switches, i.e. "", are ignored.)
    )

<h2>$(LNAME2 linking, Linking)</h2>

	$(P Linking is done directly by the $(B dmd) compiler after a successful
	compile. To prevent $(B dmd) from running the linker, use the
	$(B -c) switch.
	)

    $(WINDOWS
	$(P The programs must be linked with the D runtime library $(B phobos.lib),
	followed by the C runtime library $(B snn.lib).
	This is done automatically as long as the directories for the
	libraries are on the LIB environment variable path. A typical
	way to set LIB would be:
	)

$(CONSOLE
set LIB=\dmd\lib;\dm\lib
)
     )
     $(LINUX
	$(P The actual linking is done by running $(B gcc).
	This ensures compatibility with modules compiled with $(B gcc).
	)
     )

<h2>$(LNAME2 environment, Environment Variables)</h2>

	$(P The D compiler dmd uses the following environment variables:
	)

	$(DL

    $(WINDOWS
	<dt>$(B DFLAGS)
	<dd>The value of $(B DFLAGS) is treated as if it were appended to the
	command line to $(B dmd.exe).

	<dt>$(B LIB)
	<dd>The linker uses $(B LIB) to search for library files. For D, it will
	normally be set to:

$(CONSOLE
set LIB=\dmd\lib;\dm\lib
)

	<dt>$(B LINKCMD)
	<dd> $(B dmd) normally runs the linker by looking for $(B link.exe)
	along the $(B PATH). To use a specific linker instead, set the
	$(B LINKCMD) environment variable to it. For example:

$(CONSOLE
set LINKCMD=\dm\bin\link
)

	<dt>$(B PATH)
	<dd>If the linker is not found in the same directory as $(B dmd.exe)
	is in, the $(B PATH) is searched for it.
	$(B Note:) other linkers named
	$(B link.exe) will likely not work.
	Make sure the Digital Mars $(B link.exe)
	is found first in the $(B PATH) before other $(B link.exe)'s,
	or use $(B LINKCMD) to specifically identify which linker
	to use.
    )
    $(LINUX
	<dt>$(B CC)
	<dd> $(B dmd) normally runs the linker by looking for $(B gcc)
	along the $(B PATH). To use a specific linker instead, set the
	$(B CC) environment variable to it. For example:

$(CONSOLE
set CC=gcc
)
	$(DT $(B BROWSER)
	    $(DD This sets the browser used to open the manual page with
	    the $(B -man) switch. It defaults to $(TT firefox).
	    )
	)

	<dt>$(B DFLAGS)
	<dd>The value of $(B DFLAGS) is treated as if it were appended to the
	command line to $(B dmd).
    )
	)

$(WINDOWS
<h2>$(LNAME2 sc_ini, sc.ini Initialization File)</h2>

	$(P $(B dmd) will look for the initialization file $(B sc.ini) in the
	following sequence of directories:
	)

	$(OL
	$(LI current working directory)
	$(LI directory specified by the $(B HOME) environment variable)
	$(LI directory $(B dmd.exe) resides in)
	)

	$(P If found, environment variable
	settings in the file will override any existing settings.
	This is handy to make $(B dmd) independent of programs with
	conflicting use of environment variables.
	)

<h3>Initialization File Format</h3>

	$(P Comments are lines that begin with $(TT ;) and are ignored.
	)

	$(P Environment variables follow the $(TT [Environment]) section
	heading, in $(I NAME)=$(I value) pairs.
	The $(I NAME)s are treated as upper case.
	Comments are lines that start with ;.
	For example:
	)

$(SCINI
; sc.ini file for dmd
; Names enclosed by %% are searched for in the existing environment
; and inserted. The special name %@P% is replaced with the path
; to this file.
[Environment]
LIB="%@P%\..\lib";\dm\lib
DFLAGS="-I%@P%\..\src\phobos"
LINKCMD="%@P%\..\..\dm\bin"
DDOCFILE=mysettings.ddoc
)

<h3>Location Independence of sc.ini</h3>

	$(P The $(B %@P%) is replaced with the path to $(TT sc.ini).
	Thus, if the fully qualified file name $(TT sc.ini) is
	$(TT c:\dmd\bin\sc.ini), then $(B %@P%) will be replaced with
	$(TT c:\dmd\bin), and the above $(TT sc.ini) will be
	interpreted as:
	)

$(SCINI
[Environment]
LIB="c:\dmd\bin\..\lib";\dm\lib
DFLAGS="-Ic:\dmd\bin\..\src\phobos"
LINKCMD="c:\dmd\bin\..\..\dm\bin"
DDOCFILE=mysettings.ddoc
)

	$(P This enables your dmd setup to be moved around without having
	to re-edit $(TT sc.ini).
	)

)
$(LINUX
<h2>$(LNAME2 dmd_conf, dmd.conf Initialization File)</h2>

	$(P The Linux dmd file $(TT dmd.conf) is the same as $(TT sc.ini)
	for Windows, it's just that the file has a different name,
	enabling a setup common to both Windows and Linux to be created
	without having to re-edit the file.)

	$(P $(B dmd) will look for the initialization file $(TT dmd.conf) in the
	following sequence of directories:)

	$(OL
	$(LI current working directory)
	$(LI directory specified by the $(B HOME) environment variable)
	$(LI directory $(B dmd) resides in)
	$(LI $(TT /etc/))
	)

	$(P If found, environment variable
	settings in the file will override any existing settings.
	This is handy to make $(B dmd) independent of programs with
	conflicting use of environment variables.
	)

	$(P Environment variables follow the $(TT [Environment]) section
	heading, in $(I NAME)=$(I value) pairs.
	The $(I NAME)s are treated as upper case.
	Comments are lines that start with ;.
	For example:
	)

$(SCINI
; dmd.conf file for dmd
; Names enclosed by %% are searched for in the existing environment
; and inserted. The special name %@P% is replaced with the path
; to this file.
[Environment]
DFLAGS="-I%@P%/../src/phobos"
)
)

$(WINDOWS
<h2>$(LNAME2 problems, Common Installation Problems)</h2>

	$(UL 
	$(LI Using Cygwin's $(B unzip) utility has been known to cause
	strange problems.
	)
	$(LI Running the compiler under Cygwin's command shell has
	been also known to cause problems. Try getting it to work
	under the regular Windows shell $(B cmd.exe) before trying Cygwin's.
	)
	$(LI Installing $(B dmd) and $(B dmc) into directory paths with spaces
	in them causes problems.
	)
	)
)

<hr>
<h2>$(LNAME2 differences, Differences between Windows and Linux versions)</h2>

	$(UL 
	$(LI String literals are read-only under Linux.
	Attempting to write to them
	will cause a segment violation.)
	)
<hr>
<h2>$(LNAME2 interface_files, D Interface Files)</h2>

	$(P When an import declaration is processed in a D source file,
	the compiler searches for the D source file corresponding to
	the import, and processes that source file to extract the
	information needed from it. Alternatively, the compiler can
	instead look for a corresponding $(I D interface file).
	A D interface file contains only what an import of the module
	needs, rather than the whole implementation of that module.
	)

	$(P The advantages of using a D interface file for imports rather
	than a D source file are:
	)

	$(UL
	$(LI D interface files are often significantly smaller and much
	faster to process than the corresponding D source file.)
	$(LI They can be used to hide the source code, for example,
	one can ship an object code library along with D interface files
	rather than the complete source code.)
	)

	$(P D interface files can be created by the compiler from a
	D source file by using the $(B -H) switch to the compiler.
	D interface files have the $(B .di) file extension.
	When the compiler resolves an import declaration, it first looks
	for a $(B .di) D interface file, then it looks for a D source
	file.
	)

	$(P D interface files bear some analogous similarities to C++
	header files. But they are not required in the way that C++
	header files are, and they are not part of the D language.
	They are a feature of the compiler, and serve only as an optimization
	of the build process.
	)

<h2>$(LNAME2 library, Building Libraries)</h2>

	$(P There are three ways to build a library. For example,
	given $(TT foo.d) and $(TT bar.d) which are to be compiled, and existing
	object file $(TT bar.$(OBJEXT)) and existing library
	$(TT def.$(LIBEXT)) which are
	all to be combined into a library $(TT foo.$(LIBEXT)):)

	$(OL
	$(LI Compile modules separately and then run librarian on them:
$(WINDOWS
$(CONSOLE
dmd -c foo.d
dmd -c bar.d
$(LINK2 http://www.digitalmars.com/ctg/lib.html, lib) -c -p32 foo.lib foo.obj bar.obj abc.obj def.lib
del foo.obj bar.obj
)
)
$(LINUX
$(CONSOLE
dmd -c foo.d
dmd -c bar.d
rm -f foo.a
ar -r foo.a foo.o bar.o abc.o def.a
rm foo.o bar.o
)
)
	This option is typical when using a makefile to avoid compiling
	modules that have already been compiled.
	)
	$(LI Compile modules together and then run librarian on them:
$(WINDOWS
$(CONSOLE
dmd -c foo.d bar.d
$(LINK2 http://www.digitalmars.com/ctg/lib.html, lib) -c -p32 foo.lib foo.obj bar.obj abc.obj def.lib
del foo.obj bar.obj
)
)
$(LINUX
$(CONSOLE
dmd -c foo.d bar.d
rm -f foo.a
ar -r foo.a foo.o bar.o abc.o def.a
rm foo.o bar.o
)
)
	)
	$(LI Use $(B dmd) to compile and build library in one operation:
$(CONSOLE
dmd -lib foo.d bar.d abc.$(OBJEXT) def.$(LIBEXT)
)
	No object files are written to disk, it's all done in memory.
	Using $(B -lib) also has the advantage that modules may be compiled
	into multiple object files rather than exactly one per module.
	This improves granularity of the library without having to break
	up the modules.
	)
	)

)

Macros:
	TITLE=DMD Compiler for $(WINDOWS Windows)$(LINUX Linux)
	WIKI=DCompiler
	LIB=$(WINDOWS phobos.lib)$(LINUX $(V1 libphobos.a)$(V2 libphobos2.a))
	SWITCH=$(DT $1)$(DD $+)
