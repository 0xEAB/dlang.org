Ddoc

$(D_S $(TITLE),

$(DIVC page-contents quickindex,
    $(DIVC page-contents-header,
        $(H3 Contents)
    )
    $(OL
        $(LI $(RELATIVE_LINK2 cutting-edge, Cutting edge research)) $(OL
            $(LI $(RELATIVE_LINK2 numerical, Numerical computing))
            $(LI $(RELATIVE_LINK2 gpu, GPU programming))
            $(LI $(RELATIVE_LINK2 data_science, Data science))
        )
        $(LI $(RELATIVE_LINK2 industry, Industry)) $(OL
            $(LI $(RELATIVE_LINK2 games, Games))
            $(LI $(RELATIVE_LINK2 web, Web applications))
            $(LI $(RELATIVE_LINK2 gui, GUI applications))
        )
        $(LI $(RELATIVE_LINK2 system_programming, System programming)) $(OL
            $(LI $(RELATIVE_LINK2 operating_systems, Operating systems))
            $(LI $(RELATIVE_LINK2 compilers, Compilers))
            $(LI $(RELATIVE_LINK2 embedded, Embedded applications))
        )
        $(LI $(RELATIVE_LINK2 academia, Academia)) $(OL
            $(LI $(RELATIVE_LINK2 teaching, Teaching))
        )
    )
)

<img src="images/d3.png" border="0" align="left" alt="D Man">

This list highlights a selection of great applications written in D
from various areas.
For an overview of special features of D, have a look at the
$(LINK2 $(ROOT_DIR)overview.html, D Overview page).

$(SECTION2 $(LNAME2 cutting-edge, Cutting-edge research),

D is very similar to popular scientific language like Python as it
provides the conveniences of a modern language with a friendly syntax and is
garbage collected by default, allowing you to worry about writing your program,
rather than handling memory issues that few scientific programmers care about.
However it is is a compiled, statically typed language that can produce code as fast as C
and as a system language it gives complete control (including manual memory management)
if you need to squeeze the last few cycles out of your processor to make your program
even faster.

We now try to spotlight a few specific areas:

$(SECTION3 $(LNAME2 numerical, Numerical computing),

    One of the most popular packages for numerical computing is NumPy. It has a
    great feature set, easy API and is fast due to C bindings. However for every
    feature that is not in NumPy works a very low speed.
    D allows to write high-performant code for
    $(HTTP github.com/libmir/mir, numerical computations) that runs as efficient
    as they would have been written in C.
    Additionally due to D's introspection at compile-time it enables
    further optimizations for superior performance. See Andrei's talk
    $(HTTPS www.youtube.com/watch?v=AxnotgLql0k, Fastware) on this topic.

    D's standard library includes support for $(LINK2 $(ROOT_DIR)phobos/std_experimental_ndslice.html, multidimensional arrays)
    with more additions to come in the $(HTTPS github.com/libmir/mir, future).
)

$(SECTION3 $(LNAME2 gpu, GPU Programming),

    For most programmers used to developing for a modern CPU,
    working with GPUs for general purpose computation can appear daunting and laborious.
    Even seasoned users will admit that the performance improvements are often not worth the extra effort.

    Thanks to the power the power of Dâ€™s type system and static introspection
    $(HTTP dconf.org/2016/talks/colvin.html, GPU Programming) is
    much safer and easier to use than traditional APIs with no-compromise in performance.

)

$(SECTION3 $(LNAME2 data_science, Data science),
    D's high-level abstraction and fast runtime make it well-suited for scientific
    analysis. For example $(D http://ddili.org/ders/d.en/ranges.html, D's ranges)
    fit naturally to pipes and data streams.
    One can start from a small D-script with a small subset to test
    his analysis and easily switch to the full set by just enable optimizations
    for superior performance.
    Read Adroll's (Big data marketing company) testimonial
    $(HTTP tech.adroll.com/blog/data/2014/11/17/d-is-for-data-science.html, "D is for Data Science")
    which explains why D is a keystone language for their critical infrastructure.
    eBay recently open-sourced their internal $(HTTPS github.com/eBay/tsv-utils-dlang, data processing utilities)
    that are used in their a large-scale data mining environment.
))

$(SECTION2 $(LNAME2 industry, Industry),

$(SECTION3 $(LNAME2 games, Games),

    Binary compatibility to existing libraries is very important in large-scale
    projects.
    Remedy Entertainment has successfully shipped the first $(HTTP www.quantumbreak.com,
    AAA game) to use D code for XBox One and Windows 10.
    For more details see Ethan Watson's
    $(HTTP dconf.org/2016/talks/watson.html, presentation).

    There exist many pure D open source projects that show the rising popularity
    of D among game developers.
    For example have a look at the cross-platform 3D game engine
    $(HTTP dash.circularstudios.com, Dash) or the D game development toolkit
    $(HTTPS github.com/d-gamedev-team/gfm, gfm).
)

$(SECTION3 $(LNAME2 web, Web applications),

    D's ability to combine low and high-level code in one language, asynchronous
    features like Fibers and compile-time function execution makes it well suited
    for high-performance asynchronous I/O, concurrency and web applications like
    $(HTTPS github.com/rejectedsoftware/vibe.d, vibe.d).

    As an example, have a look at this talk about a
    $(HTTPS www.youtube.com/watch?v=_gCFpHxAJRc, Mobile Gameserver Backend in D)
)

$(SECTION3 $(LNAME2 gui, GUI Applications),

    The high productive of D also helps when creating GUI applications.

    For example a popular application under Linux is tiling terminal emulator
    $(HTTP github.com/gnunn1/terminix, terminix),
    another good example is the D development enviroment
    $(HTTPS github.com/buggins/dlangide, DLangIDE) which is based
    on the cross-platform D library $(HTTPS github.com/buggins/dlangui, dlangui).

    Due to binary compatibility all existing GUI libraries can still be
    $(HTTPS wiki.dlang.org/GUI_Libraries, easily accessed).

))

$(SECTION2 $(LNAME2 system_programming, System programming),

$(SECTION3 $(LNAME2 compilers, Compilers),

    D has been used to write dmd itself,  Facebook's fast C/C++ preprocessor
    $(HTTPS github.com/facebookarchive/warp, warp), $(HTTPS github.com/higgsjs/Higgs,
    the Higgs Javascript Virtual Machine) and many more.
    Moreover D's compile time function execution allows to generate custom grammar parsers
    at compile time - see e.g. $(HTTPS github.com/PhilippeSigaud/Pegged, Pegged)
    as an example.
)

$(SECTION3 $(LNAME2 operating_systems, Operating systems),

    D is a systems programming language and well suited for bare metal
    or kernel development. It's easy to write an Operating System in D and many
    project have proven so, to name a few:

    $(UL
        $(LI $(HTTPS github.com/xomboverlord/xomb/tree/unborn, XOmB) - exokernel operating system)
        $(LI $(HTTPS github.com/Vild/PowerNex, PowerNex) - A kernel written in D)
        $(LI $(HTTPS github.com/Rikarin/Trinix, Trinix) - Hybrid operating system for x64 PC)
    )
)

$(SECTION3 $(LNAME2 embedded, Embedded applications),

    Using $(HTTPS github.com/ldc-developers/ldc, LDC) (with LLVM as backend)
    enables one to target many CPU architectures,
    ranging from ARM and MIPS based embedded systems and smartphones
    over server systems based on POWER and Sparc up to the "big iron" z System.
))

$(SECTION2 $(LNAME2 academia, Academia),

$(SECTION3 $(LNAME2 teaching, Teaching),

    D's multi-paradigm (imperative, structured, object oriented, generic, functional programming
    purity, and even assembly) approach allows to teach in one language and gradually
    explain new features without needing to switch to a different language.

    At many universities Java is commonly taught because of its memory safety.
    D has a memory-safe subset $(I $(LINK2 $(ROOT_DIR)/safed.html, SafeD)).
    which safety and ease of use is comparable to Java while still being efficient.
    Beginners will also highly profit from the Garbage collection in D which helps
    them to write simple code without any memory management knowledge.
    However more sophisticated memory management can easily done in an advanced
    learning stage.

    Moreover D's blazingly fast runtime allows it to be used as a high level,
    high productivity scripting language, just like Python, but with the
    advantage of getting $(I static) type checking.

    This also means instead of using a toy language, students can use a real language
    that provides all the advantages of multiple languages and enjoy playing with it.
))

)

Macros:
	TITLE=Areas of D usage
