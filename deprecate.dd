Ddoc

$(SPEC_S Deprecated Features,

	$(P Sometimes it becomes clear that a feature is just a bad idea.
	These are called $(I deprecated features) and once they are judged
	to merit removal from the language, they follow a procedure in
	order to allow plenty of time for users to adjust to the change.
	)

	$(TABLE2 Deprecated Features,
	$(THEAD Feature, Spec, Warn, Dep, Error, Gone)
	$(TROW $(DEPLINK Base Class Protection), 2.058, &nbsp;, &nbsp;, &nbsp;, &nbsp;)
	)

	$(DL
	$(DT Spec)
	$(DD Removal from the Specification)
	$(DT Warn)
	$(DD The compiler emits a warning if the feature is used)
	$(DT Dep)
	$(DD The compiler issues an error if not compiled with the -d switch)
	$(DT Error)
	$(DD It is an error to use the feature)
	$(DT Gone)
	$(DD The feature is completely gone)
	)

<h3>$(DEPNAME Base Class Protection)</h3>

	Base class protections are things like:

---
class A : $(B protected) B {
   ...
}
---

<h4>Corrective Action</h4>

	$(P Delete the protection attribute keyword from in front of the base class
	and base interfaces.
	)

<h4>Rationale</h4>

	$(P With D's module system, it doesn't seem to serve any useful purpose.)

)

Macros:
	DEPLINK=$(LINK2 #$0, $0)
	DEPLINK2=$(LINK2 $1.html#$2, $2)
	DEPNAME=$(LNAME2 $0, $0)
	TITLE=Deprecated Features
	WIKI=DeprecatedFeatures

